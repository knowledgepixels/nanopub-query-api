#+ endpoint: https://query.np.trustyuri.net/repo/meta

prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix np: <http://www.nanopub.org/nschema#>
prefix npa: <http://purl.org/nanopub/admin/>
prefix npx: <http://purl.org/nanopub/x/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix dct: <http://purl.org/dc/terms/>
prefix foaf: <http://xmlns.com/foaf/0.1/>

select distinct ?np ?label ?userid ?username ?pubkey ?date where {
  { select distinct ?np ?label ?userid ?pubkey ?date { graph npa:graph {
    ?np dct:created ?date .
    optional { ?np rdfs:label ?label . }

    #=================== MULTI-VALUE PLACEHOLDER ====================#------ config: ------
    { select ?type {                                                 # <- VAR type
      bind(?__types as ?v)                                           # <- VAR __types
      optional {<x:> <x:> ?__types} # (for grlc to pick it up)       # <- VAR __types
      {select*{optional{?a ?b ?c}}limit 1} # (for some Virtuoso v.)  #
      values ?x{0 1 2 3 4 5 6 7 8 9} values ?y{0 1 2 3 4 5 6 7 8 9}  #
      bind((10*?x)+?y as ?n) # (works for a maximum of 100 values)   #
      bind(" " as ?sep) # (separator as regex-compatible character)  # <- CONST sep
      bind(concat("^([^",?sep,"]*",?sep,"){",str(?n),"}") as ?p)     #
      bind(concat(?sep,".*") as ?p0)                                 #
      filter(if(?n=0,true,regex(?v,?p))) # (=0 check for Virtuoso)   #
      bind(replace(if(?n=0,?v,replace(?v,?p,"")),?p0,"") as ?val)    #
      bind(uri(?val) as ?type)                                       # <- VAR type
    } }                                                              #
    #================================================================#---------------------

    ?np npx:hasNanopubType ?type .
    filter not exists { ?np npx:hasNanopubType npx:ExampleNanopub . }

    #=================== MULTI-VALUE PLACEHOLDER ====================#------ config: ------
    { select ?pkh {                                                  # <- VAR pkh
      bind(?__pubkeyhashes as ?v)                                    # <- VAR __pubkeyhashes
      optional {<x:> <x:> ?__pubkeyhashes} # (for grlc to pick i...) # <- VAR __pubkeyhashes
      {select*{optional{?a ?b ?c}}limit 1} # (for some Virtuoso v.)  #
      values ?x{0 1 2 3 4 5 6 7 8 9} values ?y{0 1 2 3 4 5 6 7 8 9}  #
      bind((10*?x)+?y as ?n) # (works for a maximum of 100 values)   #
      bind(" " as ?sep) # (separator as regex-compatible character)  # <- CONST sep
      bind(concat("^([^",?sep,"]*",?sep,"){",str(?n),"}") as ?p)     #
      bind(concat(?sep,".*") as ?p0)                                 #
      filter(if(?n=0,true,regex(?v,?p))) # (=0 check for Virtuoso)   #
      bind(replace(if(?n=0,?v,replace(?v,?p,"")),?p0,"") as ?pkh)    # <- VAR pkh
    } }                                                              #
    #================================================================#---------------------

    ?np npa:hasValidSignatureForPublicKeyHash ?pkh  .
    filter not exists { ?npx npx:invalidates ?np ; npa:hasValidSignatureForPublicKeyHash ?pkh . }

    #=================== MULTI-VALUE PLACEHOLDER ====================#------ config: ------
    { select ?userid {                                               # <- VAR userid
      bind(?__users as ?v)                                           # <- VAR __users
      optional {<x:> <x:> ?__users} # (for grlc to pick it up)       # <- VAR __users
      {select*{optional{?a ?b ?c}}limit 1} # (for some Virtuoso v.)  #
      values ?x{0 1 2 3 4 5 6 7 8 9} values ?y{0 1 2 3 4 5 6 7 8 9}  #
      bind((10*?x)+?y as ?n) # (works for a maximum of 100 values)   #
      bind(" " as ?sep) # (separator as regex-compatible character)  # <- CONST sep
      bind(concat("^([^",?sep,"]*",?sep,"){",str(?n),"}") as ?p)     #
      bind(concat(?sep,".*") as ?p0)                                 #
      filter(if(?n=0,true,regex(?v,?p))) # (=0 check for Virtuoso)   #
      bind(replace(if(?n=0,?v,replace(?v,?p,"")),?p0,"") as ?val)    #
      bind(uri(?val) as ?userid)                                     # <- VAR userid
    } }                                                              #
    #================================================================#---------------------

    ?np dct:creator ?userid .
  } } order by desc(?date) limit 50 }
  optional { service <https://query.np.trustyuri.net/repo/type/77757cabf6184c51c20b8b0fe5dc5e1365b7f628448335184ad54319a0affdfc> {  # (type: http://purl.org/nanopub/x/declaredBy)
    graph npa:graph {
      ?i_np npa:hasValidSignatureForPublicKeyHash ?pkh ;
        np:hasAssertion ?i_assertion .
      filter not exists { ?i_npx npx:invalidates ?i_np ; npa:hasValidSignatureForPublicKeyHash ?pkh . }
    }
    graph ?i_assertion {
      ?userid foaf:name ?username .
    }
  } }
}
