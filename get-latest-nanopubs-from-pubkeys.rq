#+ summary: Get latest nanopublications from a list of pubkeys
#+ method: GET
#+ endpoint: https://query.np.trustyuri.net/repo/empty

prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix np: <http://www.nanopub.org/nschema#>
prefix npa: <http://purl.org/nanopub/admin/>
prefix npx: <http://purl.org/nanopub/x/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix dct: <http://purl.org/dc/terms/>

select ?np ?label ?pubkey ?date where {
  #=== MULTI-VALUE PLACEHOLDER ===#
  { select ?pubkeyhash {   # <- VARIABLE ?pubkeyhash
    {select*{optional{?a ?b ?c}}limit 1}
    bind(?_pubkeyhashes as ?vs) optional { <x:> <x:> ?_pubkeyhashes }   # <- VARIABLE ?_pubkeyhashes (2x)
    values ?n { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 }
    filter(if(?n=0,true,regex(?vs,concat("^([^ ]* ){",str(?n),"}"))))
    bind(replace(if(?n=0,?vs,replace(?vs,concat("^([^ ]* ){",str(?n),"}"), ""))," .*","") as ?pubkeyhash)     # <- VARIABLE ?pubkeyhash
  } }
  #===============================#
  bind(uri(concat("https://query.np.trustyuri.net/repo/pubkey/", ?pubkeyhash)) as ?service)
  
  service ?service {
    graph npa:graph {
      ?np rdfs:label ?label ;
          npa:hasValidSignatureForPublicKey ?pubkey ;
          dct:created ?date .
      filter not exists { ?npx npx:invalidates ?np ; npa:hasValidSignatureForPublicKey ?pubkey . }
      filter not exists { ?np npx:hasNanopubType npx:ExampleNanopub . }
      filter not exists { ?np npx:hasNanopubType npx:retracts . }
    }
  }
}
order by desc(?date)
limit 100
